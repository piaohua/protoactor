// Code generated by protoc-gen-gogo.
// source: buy.proto
// DO NOT EDIT!

/*
	Package messages is a generated protocol buffer package.

	It is generated from these files:
		buy.proto
		chat.proto
		login.proto
		protos.proto
		room.proto
		user.proto
		vo.proto

	It has these top-level messages:
		CBuy
		SBuy
		CWxpayOrder
		SWxpayOrder
		CWxpayQuery
		SWxpayQuery
		CBuildAgent
		SBuildAgent
		CChatText
		SChatText
		CChatVoice
		SChatVoice
		CLogin
		SLogin
		CRegist
		SRegist
		CWxLogin
		SWxLogin
		Login
		Logined
		RepeatLogin
		Logout
		Request
		Response
		OnlineReq
		OnlineResp
		EnterRoomReq
		EnterRoomResp
		CreateRoomReq
		CreateRoomResp
		ReadyRoomReq
		EnterDeskReq
		LeaveRoomReq
		DiscardReq
		OperateReq
		TimerDiscardReq
		TimerTurnReq
		LeaveDesk
		DeskClose
		RobotMsg
		LogRegist
		LogLogin
		LogLogout
		UpdateUser
		CEnterRoom
		SEnterRoom
		CLeave
		SLeave
		CReady
		SReady
		CCreateRoom
		SCreateRoom
		CKick
		SKick
		SCamein
		SGamestart
		SDraw
		CDiscard
		SDiscard
		COperate
		SOperate
		SPengKong
		SGameover
		CConfig
		SConfig
		CUserData
		SUserData
		UserData
		RoomUser
		RoomData
		RoomCards
		RoomOver
		RoomVote
*/
package messages

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 商城
type CBuy struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Id   uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CBuy) Reset()                    { *m = CBuy{} }
func (*CBuy) ProtoMessage()               {}
func (*CBuy) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{0} }

func (m *CBuy) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CBuy) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SBuy struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Result uint32 `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Error  uint32 `protobuf:"varint,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SBuy) Reset()                    { *m = SBuy{} }
func (*SBuy) ProtoMessage()               {}
func (*SBuy) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{1} }

func (m *SBuy) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SBuy) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *SBuy) GetError() uint32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 微信支付 - 下单
type CWxpayOrder struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Id   uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Body string `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *CWxpayOrder) Reset()                    { *m = CWxpayOrder{} }
func (*CWxpayOrder) ProtoMessage()               {}
func (*CWxpayOrder) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{2} }

func (m *CWxpayOrder) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CWxpayOrder) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CWxpayOrder) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type SWxpayOrder struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Id      uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Payreq  string `protobuf:"bytes,3,opt,name=payreq,proto3" json:"payreq,omitempty"`
	Orderid string `protobuf:"bytes,4,opt,name=orderid,proto3" json:"orderid,omitempty"`
	Error   uint32 `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SWxpayOrder) Reset()                    { *m = SWxpayOrder{} }
func (*SWxpayOrder) ProtoMessage()               {}
func (*SWxpayOrder) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{3} }

func (m *SWxpayOrder) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SWxpayOrder) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SWxpayOrder) GetPayreq() string {
	if m != nil {
		return m.Payreq
	}
	return ""
}

func (m *SWxpayOrder) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *SWxpayOrder) GetError() uint32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 微信支付 - 查询
type CWxpayQuery struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Transid string `protobuf:"bytes,2,opt,name=transid,proto3" json:"transid,omitempty"`
}

func (m *CWxpayQuery) Reset()                    { *m = CWxpayQuery{} }
func (*CWxpayQuery) ProtoMessage()               {}
func (*CWxpayQuery) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{4} }

func (m *CWxpayQuery) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CWxpayQuery) GetTransid() string {
	if m != nil {
		return m.Transid
	}
	return ""
}

type SWxpayQuery struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Orderid string `protobuf:"bytes,2,opt,name=orderid,proto3" json:"orderid,omitempty"`
	Result  uint32 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Error   uint32 `protobuf:"varint,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SWxpayQuery) Reset()                    { *m = SWxpayQuery{} }
func (*SWxpayQuery) ProtoMessage()               {}
func (*SWxpayQuery) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{5} }

func (m *SWxpayQuery) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SWxpayQuery) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *SWxpayQuery) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *SWxpayQuery) GetError() uint32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 绑定代理id
type CBuildAgent struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Agent string `protobuf:"bytes,2,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (m *CBuildAgent) Reset()                    { *m = CBuildAgent{} }
func (*CBuildAgent) ProtoMessage()               {}
func (*CBuildAgent) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{6} }

func (m *CBuildAgent) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CBuildAgent) GetAgent() string {
	if m != nil {
		return m.Agent
	}
	return ""
}

type SBuildAgent struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Result uint32 `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *SBuildAgent) Reset()                    { *m = SBuildAgent{} }
func (*SBuildAgent) ProtoMessage()               {}
func (*SBuildAgent) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{7} }

func (m *SBuildAgent) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SBuildAgent) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*CBuy)(nil), "messages.CBuy")
	proto.RegisterType((*SBuy)(nil), "messages.SBuy")
	proto.RegisterType((*CWxpayOrder)(nil), "messages.CWxpayOrder")
	proto.RegisterType((*SWxpayOrder)(nil), "messages.SWxpayOrder")
	proto.RegisterType((*CWxpayQuery)(nil), "messages.CWxpayQuery")
	proto.RegisterType((*SWxpayQuery)(nil), "messages.SWxpayQuery")
	proto.RegisterType((*CBuildAgent)(nil), "messages.CBuildAgent")
	proto.RegisterType((*SBuildAgent)(nil), "messages.SBuildAgent")
}
func (this *CBuy) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CBuy)
	if !ok {
		that2, ok := that.(CBuy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *SBuy) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SBuy)
	if !ok {
		that2, ok := that.(SBuy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CWxpayOrder) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CWxpayOrder)
	if !ok {
		that2, ok := that.(CWxpayOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	return true
}
func (this *SWxpayOrder) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SWxpayOrder)
	if !ok {
		that2, ok := that.(SWxpayOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Payreq != that1.Payreq {
		return false
	}
	if this.Orderid != that1.Orderid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CWxpayQuery) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CWxpayQuery)
	if !ok {
		that2, ok := that.(CWxpayQuery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Transid != that1.Transid {
		return false
	}
	return true
}
func (this *SWxpayQuery) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SWxpayQuery)
	if !ok {
		that2, ok := that.(SWxpayQuery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Orderid != that1.Orderid {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CBuildAgent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CBuildAgent)
	if !ok {
		that2, ok := that.(CBuildAgent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Agent != that1.Agent {
		return false
	}
	return true
}
func (this *SBuildAgent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SBuildAgent)
	if !ok {
		that2, ok := that.(SBuildAgent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *CBuy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.CBuy{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SBuy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.SBuy{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CWxpayOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.CWxpayOrder{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SWxpayOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&messages.SWxpayOrder{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Payreq: "+fmt.Sprintf("%#v", this.Payreq)+",\n")
	s = append(s, "Orderid: "+fmt.Sprintf("%#v", this.Orderid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CWxpayQuery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.CWxpayQuery{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Transid: "+fmt.Sprintf("%#v", this.Transid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SWxpayQuery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&messages.SWxpayQuery{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Orderid: "+fmt.Sprintf("%#v", this.Orderid)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CBuildAgent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.CBuildAgent{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Agent: "+fmt.Sprintf("%#v", this.Agent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SBuildAgent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.SBuildAgent{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBuy(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CBuy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *SBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SBuy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Result))
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CWxpayOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CWxpayOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Id))
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBuy(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	return i, nil
}

func (m *SWxpayOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SWxpayOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Id))
	}
	if len(m.Payreq) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBuy(dAtA, i, uint64(len(m.Payreq)))
		i += copy(dAtA[i:], m.Payreq)
	}
	if len(m.Orderid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBuy(dAtA, i, uint64(len(m.Orderid)))
		i += copy(dAtA[i:], m.Orderid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CWxpayQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CWxpayQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if len(m.Transid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBuy(dAtA, i, uint64(len(m.Transid)))
		i += copy(dAtA[i:], m.Transid)
	}
	return i, nil
}

func (m *SWxpayQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SWxpayQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if len(m.Orderid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBuy(dAtA, i, uint64(len(m.Orderid)))
		i += copy(dAtA[i:], m.Orderid)
	}
	if m.Result != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Result))
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CBuildAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CBuildAgent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if len(m.Agent) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBuy(dAtA, i, uint64(len(m.Agent)))
		i += copy(dAtA[i:], m.Agent)
	}
	return i, nil
}

func (m *SBuildAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SBuildAgent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func encodeFixed64Buy(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Buy(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBuy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CBuy) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	if m.Id != 0 {
		n += 1 + sovBuy(uint64(m.Id))
	}
	return n
}

func (m *SBuy) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	if m.Result != 0 {
		n += 1 + sovBuy(uint64(m.Result))
	}
	if m.Error != 0 {
		n += 1 + sovBuy(uint64(m.Error))
	}
	return n
}

func (m *CWxpayOrder) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	if m.Id != 0 {
		n += 1 + sovBuy(uint64(m.Id))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovBuy(uint64(l))
	}
	return n
}

func (m *SWxpayOrder) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	if m.Id != 0 {
		n += 1 + sovBuy(uint64(m.Id))
	}
	l = len(m.Payreq)
	if l > 0 {
		n += 1 + l + sovBuy(uint64(l))
	}
	l = len(m.Orderid)
	if l > 0 {
		n += 1 + l + sovBuy(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovBuy(uint64(m.Error))
	}
	return n
}

func (m *CWxpayQuery) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	l = len(m.Transid)
	if l > 0 {
		n += 1 + l + sovBuy(uint64(l))
	}
	return n
}

func (m *SWxpayQuery) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	l = len(m.Orderid)
	if l > 0 {
		n += 1 + l + sovBuy(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovBuy(uint64(m.Result))
	}
	if m.Error != 0 {
		n += 1 + sovBuy(uint64(m.Error))
	}
	return n
}

func (m *CBuildAgent) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	l = len(m.Agent)
	if l > 0 {
		n += 1 + l + sovBuy(uint64(l))
	}
	return n
}

func (m *SBuildAgent) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	if m.Result != 0 {
		n += 1 + sovBuy(uint64(m.Result))
	}
	return n
}

func sovBuy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBuy(x uint64) (n int) {
	return sovBuy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CBuy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CBuy{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SBuy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SBuy{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CWxpayOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CWxpayOrder{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SWxpayOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SWxpayOrder{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Payreq:` + fmt.Sprintf("%v", this.Payreq) + `,`,
		`Orderid:` + fmt.Sprintf("%v", this.Orderid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CWxpayQuery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CWxpayQuery{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Transid:` + fmt.Sprintf("%v", this.Transid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SWxpayQuery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SWxpayQuery{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Orderid:` + fmt.Sprintf("%v", this.Orderid) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CBuildAgent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CBuildAgent{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Agent:` + fmt.Sprintf("%v", this.Agent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SBuildAgent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SBuildAgent{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBuy(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CWxpayOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CWxpayOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CWxpayOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SWxpayOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SWxpayOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SWxpayOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payreq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payreq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CWxpayQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CWxpayQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CWxpayQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SWxpayQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SWxpayQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SWxpayQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CBuildAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CBuildAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CBuildAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SBuildAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SBuildAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SBuildAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBuy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBuy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBuy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBuy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBuy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBuy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("buy.proto", fileDescriptorBuy) }

var fileDescriptorBuy = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xbb, 0x4e, 0xc3, 0x30,
	0x14, 0x8d, 0xd3, 0xb4, 0xa5, 0x37, 0x82, 0xc1, 0xaa, 0x2a, 0x4f, 0x16, 0xf2, 0x84, 0x10, 0x62,
	0x61, 0x40, 0x88, 0x89, 0x56, 0x48, 0x6c, 0x88, 0x76, 0x60, 0x4e, 0xb0, 0x55, 0x45, 0x2a, 0x75,
	0x70, 0x12, 0x09, 0x6f, 0x7c, 0x02, 0x9f, 0xc1, 0xa7, 0x30, 0x76, 0x64, 0x24, 0x66, 0x61, 0xec,
	0x27, 0xa0, 0xb8, 0x8e, 0x5a, 0xa4, 0x94, 0xc7, 0x76, 0xcf, 0x7d, 0x9c, 0x73, 0xee, 0xb5, 0xa1,
	0x17, 0x17, 0xfa, 0x38, 0x55, 0x32, 0x97, 0x78, 0xe7, 0x5e, 0x64, 0x59, 0x34, 0x15, 0x19, 0x3b,
	0x84, 0x60, 0x34, 0x2c, 0x34, 0xc6, 0x10, 0xdc, 0x49, 0x2e, 0x08, 0xda, 0x47, 0x07, 0xbb, 0x63,
	0x1b, 0xe3, 0x3d, 0xf0, 0x13, 0x4e, 0x7c, 0x9b, 0xf1, 0x13, 0xce, 0xae, 0x20, 0x98, 0x6c, 0xeb,
	0x1d, 0x40, 0x47, 0x89, 0xac, 0x98, 0xe5, 0xae, 0xdf, 0x21, 0xdc, 0x87, 0xb6, 0x50, 0x4a, 0x2a,
	0xd2, 0xb2, 0xe9, 0x15, 0x60, 0x97, 0x10, 0x8e, 0x6e, 0x1f, 0xd3, 0x48, 0x5f, 0x2b, 0x2e, 0xd4,
	0x5f, 0xc4, 0xab, 0x9e, 0x58, 0x72, 0x6d, 0x79, 0x7a, 0x63, 0x1b, 0x33, 0x0d, 0xe1, 0xe4, 0x9f,
	0x34, 0x03, 0xe8, 0xa4, 0x91, 0x56, 0xe2, 0xc1, 0x11, 0x39, 0x84, 0x09, 0x74, 0x65, 0x45, 0x92,
	0x70, 0x12, 0xd8, 0x42, 0x0d, 0xd7, 0x1b, 0xb4, 0x37, 0x37, 0x38, 0xaf, 0x37, 0xb8, 0x29, 0x84,
	0x6a, 0x3e, 0x09, 0x81, 0x6e, 0xae, 0xa2, 0x79, 0xe6, 0xf4, 0x7b, 0xe3, 0x1a, 0xb2, 0xa4, 0xf6,
	0xfd, 0xe3, 0x70, 0xed, 0xc7, 0xff, 0xee, 0x67, 0x7d, 0xe9, 0x56, 0xf3, 0xa5, 0x83, 0x4d, 0x9f,
	0xa7, 0x10, 0x8e, 0x86, 0x45, 0x32, 0xe3, 0x17, 0x53, 0x31, 0xcf, 0x1b, 0xa5, 0xfa, 0xd0, 0x8e,
	0xaa, 0xa2, 0x13, 0x5a, 0x01, 0x76, 0x06, 0xe1, 0xe4, 0x97, 0xc1, 0x2d, 0x6f, 0x3e, 0x3c, 0x5a,
	0x94, 0xd4, 0x7b, 0x2b, 0xa9, 0xb7, 0x2c, 0x29, 0x7a, 0x32, 0x14, 0xbd, 0x18, 0x8a, 0x5e, 0x0d,
	0x45, 0x0b, 0x43, 0xd1, 0xbb, 0xa1, 0xe8, 0xd3, 0x50, 0x6f, 0x69, 0x28, 0x7a, 0xfe, 0xa0, 0x5e,
	0xdc, 0xb1, 0x5f, 0xf2, 0xe4, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x04, 0xf6, 0x31, 0x9f, 0x02,
	0x00, 0x00,
}
