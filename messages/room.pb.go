// Code generated by protoc-gen-gogo.
// source: room.proto
// DO NOT EDIT!

package messages

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 进入房间,断线重连
type CEnterRoom struct {
	Code       uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Invitecode string `protobuf:"bytes,2,opt,name=invitecode,proto3" json:"invitecode,omitempty"`
}

func (m *CEnterRoom) Reset()                    { *m = CEnterRoom{} }
func (*CEnterRoom) ProtoMessage()               {}
func (*CEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{0} }

func (m *CEnterRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CEnterRoom) GetInvitecode() string {
	if m != nil {
		return m.Invitecode
	}
	return ""
}

type SEnterRoom struct {
	Code     uint32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Roominfo *RoomData    `protobuf:"bytes,2,opt,name=roominfo" json:"roominfo,omitempty"`
	Userinfo []*RoomUser  `protobuf:"bytes,3,rep,name=userinfo" json:"userinfo,omitempty"`
	Cardinfo []*RoomCards `protobuf:"bytes,4,rep,name=cardinfo" json:"cardinfo,omitempty"`
	Voteinfo *RoomVote    `protobuf:"bytes,5,opt,name=voteinfo" json:"voteinfo,omitempty"`
	Error    uint32       `protobuf:"varint,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SEnterRoom) Reset()                    { *m = SEnterRoom{} }
func (*SEnterRoom) ProtoMessage()               {}
func (*SEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{1} }

func (m *SEnterRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SEnterRoom) GetRoominfo() *RoomData {
	if m != nil {
		return m.Roominfo
	}
	return nil
}

func (m *SEnterRoom) GetUserinfo() []*RoomUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *SEnterRoom) GetCardinfo() []*RoomCards {
	if m != nil {
		return m.Cardinfo
	}
	return nil
}

func (m *SEnterRoom) GetVoteinfo() *RoomVote {
	if m != nil {
		return m.Voteinfo
	}
	return nil
}

func (m *SEnterRoom) GetError() uint32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 离开房间
type CLeave struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CLeave) Reset()                    { *m = CLeave{} }
func (*CLeave) ProtoMessage()               {}
func (*CLeave) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{2} }

func (m *CLeave) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SLeave struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Error uint32 `protobuf:"varint,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SLeave) Reset()                    { *m = SLeave{} }
func (*SLeave) ProtoMessage()               {}
func (*SLeave) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{3} }

func (m *SLeave) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SLeave) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SLeave) GetError() uint32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 准备游戏
type CReady struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Ready bool   `protobuf:"varint,2,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (m *CReady) Reset()                    { *m = CReady{} }
func (*CReady) ProtoMessage()               {}
func (*CReady) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{4} }

func (m *CReady) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CReady) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

type SReady struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Ready bool   `protobuf:"varint,3,opt,name=ready,proto3" json:"ready,omitempty"`
	Error uint32 `protobuf:"varint,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SReady) Reset()                    { *m = SReady{} }
func (*SReady) ProtoMessage()               {}
func (*SReady) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{5} }

func (m *SReady) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SReady) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SReady) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *SReady) GetError() uint32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 创建房间
type CCreateRoom struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Rname   string `protobuf:"bytes,2,opt,name=rname,proto3" json:"rname,omitempty"`
	Rtype   uint32 `protobuf:"varint,3,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Ante    uint32 `protobuf:"varint,4,opt,name=ante,proto3" json:"ante,omitempty"`
	Round   uint32 `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	Payment uint32 `protobuf:"varint,6,opt,name=payment,proto3" json:"payment,omitempty"`
	Pao     uint32 `protobuf:"varint,7,opt,name=pao,proto3" json:"pao,omitempty"`
	Count   uint32 `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *CCreateRoom) Reset()                    { *m = CCreateRoom{} }
func (*CCreateRoom) ProtoMessage()               {}
func (*CCreateRoom) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{6} }

func (m *CCreateRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CCreateRoom) GetRname() string {
	if m != nil {
		return m.Rname
	}
	return ""
}

func (m *CCreateRoom) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *CCreateRoom) GetAnte() uint32 {
	if m != nil {
		return m.Ante
	}
	return 0
}

func (m *CCreateRoom) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *CCreateRoom) GetPayment() uint32 {
	if m != nil {
		return m.Payment
	}
	return 0
}

func (m *CCreateRoom) GetPao() uint32 {
	if m != nil {
		return m.Pao
	}
	return 0
}

func (m *CCreateRoom) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// 返回房间数据,
type SCreateRoom struct {
	Code  uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Rdata *RoomData `protobuf:"bytes,2,opt,name=rdata" json:"rdata,omitempty"`
	Error uint32    `protobuf:"varint,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SCreateRoom) Reset()                    { *m = SCreateRoom{} }
func (*SCreateRoom) ProtoMessage()               {}
func (*SCreateRoom) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{7} }

func (m *SCreateRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SCreateRoom) GetRdata() *RoomData {
	if m != nil {
		return m.Rdata
	}
	return nil
}

func (m *SCreateRoom) GetError() uint32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 踢人
type CKick struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
}

func (m *CKick) Reset()                    { *m = CKick{} }
func (*CKick) ProtoMessage()               {}
func (*CKick) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{8} }

func (m *CKick) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CKick) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

type SKick struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat   uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid uint32 `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Result uint32 `protobuf:"varint,4,opt,name=result,proto3" json:"result,omitempty"`
	Error  uint32 `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SKick) Reset()                    { *m = SKick{} }
func (*SKick) ProtoMessage()               {}
func (*SKick) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{9} }

func (m *SKick) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SKick) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SKick) GetUserid() uint32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *SKick) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *SKick) GetError() uint32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 其他玩家进入房间
type SCamein struct {
	Code     uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Userinfo *RoomUser `protobuf:"bytes,2,opt,name=userinfo" json:"userinfo,omitempty"`
}

func (m *SCamein) Reset()                    { *m = SCamein{} }
func (*SCamein) ProtoMessage()               {}
func (*SCamein) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{10} }

func (m *SCamein) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SCamein) GetUserinfo() *RoomUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

// 开始游戏,打骰,选庄,选赖,发牌,包含两个骰子数字
type SGamestart struct {
	Code   uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Dice   uint32   `protobuf:"varint,2,opt,name=dice,proto3" json:"dice,omitempty"`
	Dealer uint32   `protobuf:"varint,3,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Laipi  uint32   `protobuf:"varint,4,opt,name=laipi,proto3" json:"laipi,omitempty"`
	Laizi  uint32   `protobuf:"varint,5,opt,name=laizi,proto3" json:"laizi,omitempty"`
	Cards  []uint32 `protobuf:"varint,6,rep,packed,name=cards" json:"cards,omitempty"`
	Value  uint32   `protobuf:"varint,7,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SGamestart) Reset()                    { *m = SGamestart{} }
func (*SGamestart) ProtoMessage()               {}
func (*SGamestart) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{11} }

func (m *SGamestart) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SGamestart) GetDice() uint32 {
	if m != nil {
		return m.Dice
	}
	return 0
}

func (m *SGamestart) GetDealer() uint32 {
	if m != nil {
		return m.Dealer
	}
	return 0
}

func (m *SGamestart) GetLaipi() uint32 {
	if m != nil {
		return m.Laipi
	}
	return 0
}

func (m *SGamestart) GetLaizi() uint32 {
	if m != nil {
		return m.Laizi
	}
	return 0
}

func (m *SGamestart) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *SGamestart) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 抓牌
type SDraw struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Card  uint32 `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
	Value uint32 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Kong  uint32 `protobuf:"varint,5,opt,name=kong,proto3" json:"kong,omitempty"`
}

func (m *SDraw) Reset()                    { *m = SDraw{} }
func (*SDraw) ProtoMessage()               {}
func (*SDraw) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{12} }

func (m *SDraw) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SDraw) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SDraw) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *SDraw) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SDraw) GetKong() uint32 {
	if m != nil {
		return m.Kong
	}
	return 0
}

// 出牌
type CDiscard struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Card uint32 `protobuf:"varint,2,opt,name=card,proto3" json:"card,omitempty"`
}

func (m *CDiscard) Reset()                    { *m = CDiscard{} }
func (*CDiscard) ProtoMessage()               {}
func (*CDiscard) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{13} }

func (m *CDiscard) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CDiscard) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

// 玩家出牌广播
type SDiscard struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Card  uint32 `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
	Value uint32 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Error uint32 `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SDiscard) Reset()                    { *m = SDiscard{} }
func (*SDiscard) ProtoMessage()               {}
func (*SDiscard) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{14} }

func (m *SDiscard) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SDiscard) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SDiscard) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *SDiscard) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SDiscard) GetError() uint32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 玩家碰杠操作
type COperate struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Card  uint32 `protobuf:"varint,2,opt,name=card,proto3" json:"card,omitempty"`
	Value uint32 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *COperate) Reset()                    { *m = COperate{} }
func (*COperate) ProtoMessage()               {}
func (*COperate) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{15} }

func (m *COperate) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *COperate) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *COperate) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 碰杠广播 ,胡牌不在这个接口返回
type SOperate struct {
	Code        uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat        uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Beseat      uint32 `protobuf:"varint,3,opt,name=beseat,proto3" json:"beseat,omitempty"`
	Card        uint32 `protobuf:"varint,4,opt,name=card,proto3" json:"card,omitempty"`
	Value       uint32 `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Discontinue uint32 `protobuf:"varint,6,opt,name=discontinue,proto3" json:"discontinue,omitempty"`
	Error       uint32 `protobuf:"varint,7,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SOperate) Reset()                    { *m = SOperate{} }
func (*SOperate) ProtoMessage()               {}
func (*SOperate) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{16} }

func (m *SOperate) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SOperate) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SOperate) GetBeseat() uint32 {
	if m != nil {
		return m.Beseat
	}
	return 0
}

func (m *SOperate) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *SOperate) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SOperate) GetDiscontinue() uint32 {
	if m != nil {
		return m.Discontinue
	}
	return 0
}

func (m *SOperate) GetError() uint32 {
	if m != nil {
		return m.Error
	}
	return 0
}

// 处理前面有玩家胡牌优先操作,如果该玩家跳过胡牌,此协议向有碰和明杠的玩家主动发送
type SPengKong struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Card  uint32 `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
	Value uint32 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SPengKong) Reset()                    { *m = SPengKong{} }
func (*SPengKong) ProtoMessage()               {}
func (*SPengKong) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{17} }

func (m *SPengKong) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SPengKong) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SPengKong) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *SPengKong) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 结算广播接口，游戏结束
type SGameover struct {
	Code    uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Roomid  uint32      `protobuf:"varint,2,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Round   uint32      `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	Expire  uint32      `protobuf:"varint,4,opt,name=expire,proto3" json:"expire,omitempty"`
	HuType  uint32      `protobuf:"varint,5,opt,name=huType,proto3" json:"huType,omitempty"`
	PaoSeat uint32      `protobuf:"varint,6,opt,name=paoSeat,proto3" json:"paoSeat,omitempty"`
	Seat    uint32      `protobuf:"varint,7,opt,name=seat,proto3" json:"seat,omitempty"`
	Card    uint32      `protobuf:"varint,8,opt,name=card,proto3" json:"card,omitempty"`
	Data    []*RoomOver `protobuf:"bytes,9,rep,name=data" json:"data,omitempty"`
}

func (m *SGameover) Reset()                    { *m = SGameover{} }
func (*SGameover) ProtoMessage()               {}
func (*SGameover) Descriptor() ([]byte, []int) { return fileDescriptorRoom, []int{18} }

func (m *SGameover) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SGameover) GetRoomid() uint32 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *SGameover) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *SGameover) GetExpire() uint32 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *SGameover) GetHuType() uint32 {
	if m != nil {
		return m.HuType
	}
	return 0
}

func (m *SGameover) GetPaoSeat() uint32 {
	if m != nil {
		return m.PaoSeat
	}
	return 0
}

func (m *SGameover) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SGameover) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *SGameover) GetData() []*RoomOver {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CEnterRoom)(nil), "messages.CEnterRoom")
	proto.RegisterType((*SEnterRoom)(nil), "messages.SEnterRoom")
	proto.RegisterType((*CLeave)(nil), "messages.CLeave")
	proto.RegisterType((*SLeave)(nil), "messages.SLeave")
	proto.RegisterType((*CReady)(nil), "messages.CReady")
	proto.RegisterType((*SReady)(nil), "messages.SReady")
	proto.RegisterType((*CCreateRoom)(nil), "messages.CCreateRoom")
	proto.RegisterType((*SCreateRoom)(nil), "messages.SCreateRoom")
	proto.RegisterType((*CKick)(nil), "messages.CKick")
	proto.RegisterType((*SKick)(nil), "messages.SKick")
	proto.RegisterType((*SCamein)(nil), "messages.SCamein")
	proto.RegisterType((*SGamestart)(nil), "messages.SGamestart")
	proto.RegisterType((*SDraw)(nil), "messages.SDraw")
	proto.RegisterType((*CDiscard)(nil), "messages.CDiscard")
	proto.RegisterType((*SDiscard)(nil), "messages.SDiscard")
	proto.RegisterType((*COperate)(nil), "messages.COperate")
	proto.RegisterType((*SOperate)(nil), "messages.SOperate")
	proto.RegisterType((*SPengKong)(nil), "messages.SPengKong")
	proto.RegisterType((*SGameover)(nil), "messages.SGameover")
}
func (this *CEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CEnterRoom)
	if !ok {
		that2, ok := that.(CEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Invitecode != that1.Invitecode {
		return false
	}
	return true
}
func (this *SEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SEnterRoom)
	if !ok {
		that2, ok := that.(SEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !this.Roominfo.Equal(that1.Roominfo) {
		return false
	}
	if len(this.Userinfo) != len(that1.Userinfo) {
		return false
	}
	for i := range this.Userinfo {
		if !this.Userinfo[i].Equal(that1.Userinfo[i]) {
			return false
		}
	}
	if len(this.Cardinfo) != len(that1.Cardinfo) {
		return false
	}
	for i := range this.Cardinfo {
		if !this.Cardinfo[i].Equal(that1.Cardinfo[i]) {
			return false
		}
	}
	if !this.Voteinfo.Equal(that1.Voteinfo) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CLeave) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CLeave)
	if !ok {
		that2, ok := that.(CLeave)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SLeave) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SLeave)
	if !ok {
		that2, ok := that.(SLeave)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CReady) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CReady)
	if !ok {
		that2, ok := that.(CReady)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Ready != that1.Ready {
		return false
	}
	return true
}
func (this *SReady) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SReady)
	if !ok {
		that2, ok := that.(SReady)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Ready != that1.Ready {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CCreateRoom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CCreateRoom)
	if !ok {
		that2, ok := that.(CCreateRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Rname != that1.Rname {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Ante != that1.Ante {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Payment != that1.Payment {
		return false
	}
	if this.Pao != that1.Pao {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *SCreateRoom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SCreateRoom)
	if !ok {
		that2, ok := that.(SCreateRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !this.Rdata.Equal(that1.Rdata) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CKick) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CKick)
	if !ok {
		that2, ok := that.(CKick)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	return true
}
func (this *SKick) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SKick)
	if !ok {
		that2, ok := that.(SKick)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SCamein) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SCamein)
	if !ok {
		that2, ok := that.(SCamein)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !this.Userinfo.Equal(that1.Userinfo) {
		return false
	}
	return true
}
func (this *SGamestart) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SGamestart)
	if !ok {
		that2, ok := that.(SGamestart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Dice != that1.Dice {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Laipi != that1.Laipi {
		return false
	}
	if this.Laizi != that1.Laizi {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SDraw) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SDraw)
	if !ok {
		that2, ok := that.(SDraw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Kong != that1.Kong {
		return false
	}
	return true
}
func (this *CDiscard) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CDiscard)
	if !ok {
		that2, ok := that.(CDiscard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	return true
}
func (this *SDiscard) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SDiscard)
	if !ok {
		that2, ok := that.(SDiscard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *COperate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*COperate)
	if !ok {
		that2, ok := that.(COperate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SOperate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SOperate)
	if !ok {
		that2, ok := that.(SOperate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Beseat != that1.Beseat {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Discontinue != that1.Discontinue {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SPengKong) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SPengKong)
	if !ok {
		that2, ok := that.(SPengKong)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SGameover) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SGameover)
	if !ok {
		that2, ok := that.(SGameover)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Expire != that1.Expire {
		return false
	}
	if this.HuType != that1.HuType {
		return false
	}
	if this.PaoSeat != that1.PaoSeat {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *CEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.CEnterRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Invitecode: "+fmt.Sprintf("%#v", this.Invitecode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&messages.SEnterRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Roominfo != nil {
		s = append(s, "Roominfo: "+fmt.Sprintf("%#v", this.Roominfo)+",\n")
	}
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	if this.Cardinfo != nil {
		s = append(s, "Cardinfo: "+fmt.Sprintf("%#v", this.Cardinfo)+",\n")
	}
	if this.Voteinfo != nil {
		s = append(s, "Voteinfo: "+fmt.Sprintf("%#v", this.Voteinfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CLeave) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.CLeave{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SLeave) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.SLeave{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CReady) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.CReady{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Ready: "+fmt.Sprintf("%#v", this.Ready)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SReady) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&messages.SReady{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Ready: "+fmt.Sprintf("%#v", this.Ready)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CCreateRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&messages.CCreateRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Rname: "+fmt.Sprintf("%#v", this.Rname)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Ante: "+fmt.Sprintf("%#v", this.Ante)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Payment: "+fmt.Sprintf("%#v", this.Payment)+",\n")
	s = append(s, "Pao: "+fmt.Sprintf("%#v", this.Pao)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SCreateRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.SCreateRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Rdata != nil {
		s = append(s, "Rdata: "+fmt.Sprintf("%#v", this.Rdata)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CKick) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.CKick{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SKick) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&messages.SKick{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SCamein) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.SCamein{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SGamestart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&messages.SGamestart{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Dice: "+fmt.Sprintf("%#v", this.Dice)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Laipi: "+fmt.Sprintf("%#v", this.Laipi)+",\n")
	s = append(s, "Laizi: "+fmt.Sprintf("%#v", this.Laizi)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SDraw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&messages.SDraw{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Kong: "+fmt.Sprintf("%#v", this.Kong)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDiscard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.CDiscard{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SDiscard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&messages.SDiscard{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *COperate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.COperate{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SOperate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&messages.SOperate{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Beseat: "+fmt.Sprintf("%#v", this.Beseat)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Discontinue: "+fmt.Sprintf("%#v", this.Discontinue)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPengKong) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&messages.SPengKong{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SGameover) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&messages.SGameover{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Expire: "+fmt.Sprintf("%#v", this.Expire)+",\n")
	s = append(s, "HuType: "+fmt.Sprintf("%#v", this.HuType)+",\n")
	s = append(s, "PaoSeat: "+fmt.Sprintf("%#v", this.PaoSeat)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRoom(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if len(m.Invitecode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Invitecode)))
		i += copy(dAtA[i:], m.Invitecode)
	}
	return i, nil
}

func (m *SEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Roominfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Roominfo.Size()))
		n1, err := m.Roominfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Userinfo) > 0 {
		for _, msg := range m.Userinfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Cardinfo) > 0 {
		for _, msg := range m.Cardinfo {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Voteinfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Voteinfo.Size()))
		n2, err := m.Voteinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Error != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CLeave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SLeave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CReady) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CReady) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Ready {
		dAtA[i] = 0x10
		i++
		if m.Ready {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SReady) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SReady) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Ready {
		dAtA[i] = 0x18
		i++
		if m.Ready {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CCreateRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCreateRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if len(m.Rname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Rname)))
		i += copy(dAtA[i:], m.Rname)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Rtype))
	}
	if m.Ante != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Ante))
	}
	if m.Round != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Round))
	}
	if m.Payment != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Payment))
	}
	if m.Pao != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Pao))
	}
	if m.Count != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *SCreateRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCreateRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Rdata != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Rdata.Size()))
		n3, err := m.Rdata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CKick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CKick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Seat))
	}
	return i, nil
}

func (m *SKick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SKick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Userid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Userid))
	}
	if m.Result != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Result))
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SCamein) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCamein) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Userinfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Userinfo.Size()))
		n4, err := m.Userinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *SGamestart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGamestart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Dice != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Dice))
	}
	if m.Dealer != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Dealer))
	}
	if m.Laipi != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Laipi))
	}
	if m.Laizi != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Laizi))
	}
	if len(m.Cards) > 0 {
		dAtA6 := make([]byte, len(m.Cards)*10)
		var j5 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintRoom(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.Value != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *SDraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SDraw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Card != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Card))
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Value))
	}
	if m.Kong != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Kong))
	}
	return i, nil
}

func (m *CDiscard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDiscard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Card != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Card))
	}
	return i, nil
}

func (m *SDiscard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SDiscard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Card != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Card))
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Value))
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *COperate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *COperate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Card != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Card))
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *SOperate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SOperate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Beseat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Beseat))
	}
	if m.Card != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Card))
	}
	if m.Value != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Value))
	}
	if m.Discontinue != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Discontinue))
	}
	if m.Error != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SPengKong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPengKong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Card != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Card))
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *SGameover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGameover) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Roomid))
	}
	if m.Round != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Round))
	}
	if m.Expire != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Expire))
	}
	if m.HuType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.HuType))
	}
	if m.PaoSeat != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.PaoSeat))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Seat))
	}
	if m.Card != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Card))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Room(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Room(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRoom(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CEnterRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	l = len(m.Invitecode)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *SEnterRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Roominfo != nil {
		l = m.Roominfo.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	if len(m.Userinfo) > 0 {
		for _, e := range m.Userinfo {
			l = e.Size()
			n += 1 + l + sovRoom(uint64(l))
		}
	}
	if len(m.Cardinfo) > 0 {
		for _, e := range m.Cardinfo {
			l = e.Size()
			n += 1 + l + sovRoom(uint64(l))
		}
	}
	if m.Voteinfo != nil {
		l = m.Voteinfo.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovRoom(uint64(m.Error))
	}
	return n
}

func (m *CLeave) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	return n
}

func (m *SLeave) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovRoom(uint64(m.Seat))
	}
	if m.Error != 0 {
		n += 1 + sovRoom(uint64(m.Error))
	}
	return n
}

func (m *CReady) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Ready {
		n += 2
	}
	return n
}

func (m *SReady) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovRoom(uint64(m.Seat))
	}
	if m.Ready {
		n += 2
	}
	if m.Error != 0 {
		n += 1 + sovRoom(uint64(m.Error))
	}
	return n
}

func (m *CCreateRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	l = len(m.Rname)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovRoom(uint64(m.Rtype))
	}
	if m.Ante != 0 {
		n += 1 + sovRoom(uint64(m.Ante))
	}
	if m.Round != 0 {
		n += 1 + sovRoom(uint64(m.Round))
	}
	if m.Payment != 0 {
		n += 1 + sovRoom(uint64(m.Payment))
	}
	if m.Pao != 0 {
		n += 1 + sovRoom(uint64(m.Pao))
	}
	if m.Count != 0 {
		n += 1 + sovRoom(uint64(m.Count))
	}
	return n
}

func (m *SCreateRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Rdata != nil {
		l = m.Rdata.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovRoom(uint64(m.Error))
	}
	return n
}

func (m *CKick) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovRoom(uint64(m.Seat))
	}
	return n
}

func (m *SKick) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovRoom(uint64(m.Seat))
	}
	if m.Userid != 0 {
		n += 1 + sovRoom(uint64(m.Userid))
	}
	if m.Result != 0 {
		n += 1 + sovRoom(uint64(m.Result))
	}
	if m.Error != 0 {
		n += 1 + sovRoom(uint64(m.Error))
	}
	return n
}

func (m *SCamein) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Userinfo != nil {
		l = m.Userinfo.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *SGamestart) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Dice != 0 {
		n += 1 + sovRoom(uint64(m.Dice))
	}
	if m.Dealer != 0 {
		n += 1 + sovRoom(uint64(m.Dealer))
	}
	if m.Laipi != 0 {
		n += 1 + sovRoom(uint64(m.Laipi))
	}
	if m.Laizi != 0 {
		n += 1 + sovRoom(uint64(m.Laizi))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovRoom(uint64(e))
		}
		n += 1 + sovRoom(uint64(l)) + l
	}
	if m.Value != 0 {
		n += 1 + sovRoom(uint64(m.Value))
	}
	return n
}

func (m *SDraw) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovRoom(uint64(m.Seat))
	}
	if m.Card != 0 {
		n += 1 + sovRoom(uint64(m.Card))
	}
	if m.Value != 0 {
		n += 1 + sovRoom(uint64(m.Value))
	}
	if m.Kong != 0 {
		n += 1 + sovRoom(uint64(m.Kong))
	}
	return n
}

func (m *CDiscard) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Card != 0 {
		n += 1 + sovRoom(uint64(m.Card))
	}
	return n
}

func (m *SDiscard) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovRoom(uint64(m.Seat))
	}
	if m.Card != 0 {
		n += 1 + sovRoom(uint64(m.Card))
	}
	if m.Value != 0 {
		n += 1 + sovRoom(uint64(m.Value))
	}
	if m.Error != 0 {
		n += 1 + sovRoom(uint64(m.Error))
	}
	return n
}

func (m *COperate) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Card != 0 {
		n += 1 + sovRoom(uint64(m.Card))
	}
	if m.Value != 0 {
		n += 1 + sovRoom(uint64(m.Value))
	}
	return n
}

func (m *SOperate) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovRoom(uint64(m.Seat))
	}
	if m.Beseat != 0 {
		n += 1 + sovRoom(uint64(m.Beseat))
	}
	if m.Card != 0 {
		n += 1 + sovRoom(uint64(m.Card))
	}
	if m.Value != 0 {
		n += 1 + sovRoom(uint64(m.Value))
	}
	if m.Discontinue != 0 {
		n += 1 + sovRoom(uint64(m.Discontinue))
	}
	if m.Error != 0 {
		n += 1 + sovRoom(uint64(m.Error))
	}
	return n
}

func (m *SPengKong) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovRoom(uint64(m.Seat))
	}
	if m.Card != 0 {
		n += 1 + sovRoom(uint64(m.Card))
	}
	if m.Value != 0 {
		n += 1 + sovRoom(uint64(m.Value))
	}
	return n
}

func (m *SGameover) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Roomid != 0 {
		n += 1 + sovRoom(uint64(m.Roomid))
	}
	if m.Round != 0 {
		n += 1 + sovRoom(uint64(m.Round))
	}
	if m.Expire != 0 {
		n += 1 + sovRoom(uint64(m.Expire))
	}
	if m.HuType != 0 {
		n += 1 + sovRoom(uint64(m.HuType))
	}
	if m.PaoSeat != 0 {
		n += 1 + sovRoom(uint64(m.PaoSeat))
	}
	if m.Seat != 0 {
		n += 1 + sovRoom(uint64(m.Seat))
	}
	if m.Card != 0 {
		n += 1 + sovRoom(uint64(m.Card))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovRoom(uint64(l))
		}
	}
	return n
}

func sovRoom(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoom(x uint64) (n int) {
	return sovRoom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEnterRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Invitecode:` + fmt.Sprintf("%v", this.Invitecode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEnterRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Roominfo:` + strings.Replace(fmt.Sprintf("%v", this.Roominfo), "RoomData", "RoomData", 1) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "RoomUser", "RoomUser", 1) + `,`,
		`Cardinfo:` + strings.Replace(fmt.Sprintf("%v", this.Cardinfo), "RoomCards", "RoomCards", 1) + `,`,
		`Voteinfo:` + strings.Replace(fmt.Sprintf("%v", this.Voteinfo), "RoomVote", "RoomVote", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CLeave) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CLeave{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SLeave) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SLeave{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CReady) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CReady{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Ready:` + fmt.Sprintf("%v", this.Ready) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SReady) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SReady{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Ready:` + fmt.Sprintf("%v", this.Ready) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CCreateRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CCreateRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Rname:` + fmt.Sprintf("%v", this.Rname) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Ante:` + fmt.Sprintf("%v", this.Ante) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Payment:` + fmt.Sprintf("%v", this.Payment) + `,`,
		`Pao:` + fmt.Sprintf("%v", this.Pao) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SCreateRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SCreateRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Rdata:` + strings.Replace(fmt.Sprintf("%v", this.Rdata), "RoomData", "RoomData", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CKick) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CKick{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SKick) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SKick{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SCamein) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SCamein{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "RoomUser", "RoomUser", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SGamestart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SGamestart{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Dice:` + fmt.Sprintf("%v", this.Dice) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Laipi:` + fmt.Sprintf("%v", this.Laipi) + `,`,
		`Laizi:` + fmt.Sprintf("%v", this.Laizi) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SDraw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SDraw{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Kong:` + fmt.Sprintf("%v", this.Kong) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDiscard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDiscard{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SDiscard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SDiscard{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *COperate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&COperate{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SOperate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SOperate{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Beseat:` + fmt.Sprintf("%v", this.Beseat) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Discontinue:` + fmt.Sprintf("%v", this.Discontinue) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPengKong) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPengKong{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SGameover) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SGameover{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Expire:` + fmt.Sprintf("%v", this.Expire) + `,`,
		`HuType:` + fmt.Sprintf("%v", this.HuType) + `,`,
		`PaoSeat:` + fmt.Sprintf("%v", this.PaoSeat) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "RoomOver", "RoomOver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRoom(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invitecode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Invitecode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roominfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roominfo == nil {
				m.Roominfo = &RoomData{}
			}
			if err := m.Roominfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userinfo = append(m.Userinfo, &RoomUser{})
			if err := m.Userinfo[len(m.Userinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cardinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cardinfo = append(m.Cardinfo, &RoomCards{})
			if err := m.Cardinfo[len(m.Cardinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voteinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Voteinfo == nil {
				m.Voteinfo = &RoomVote{}
			}
			if err := m.Voteinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CReady) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CReady: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CReady: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SReady) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SReady: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SReady: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCreateRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCreateRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCreateRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ante", wireType)
			}
			m.Ante = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ante |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			m.Payment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Payment |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pao", wireType)
			}
			m.Pao = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pao |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCreateRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCreateRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCreateRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rdata == nil {
				m.Rdata = &RoomData{}
			}
			if err := m.Rdata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CKick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CKick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CKick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SKick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SKick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SKick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCamein) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCamein: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCamein: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Userinfo == nil {
				m.Userinfo = &RoomUser{}
			}
			if err := m.Userinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGamestart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGamestart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGamestart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dice", wireType)
			}
			m.Dice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dice |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			m.Dealer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dealer |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Laipi", wireType)
			}
			m.Laipi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Laipi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Laizi", wireType)
			}
			m.Laizi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Laizi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRoom
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoom
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SDraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SDraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SDraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kong", wireType)
			}
			m.Kong = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kong |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDiscard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDiscard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDiscard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SDiscard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SDiscard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SDiscard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *COperate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: COperate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: COperate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SOperate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SOperate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SOperate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beseat", wireType)
			}
			m.Beseat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Beseat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discontinue", wireType)
			}
			m.Discontinue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Discontinue |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPengKong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPengKong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPengKong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGameover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGameover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGameover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HuType", wireType)
			}
			m.HuType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HuType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaoSeat", wireType)
			}
			m.PaoSeat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaoSeat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RoomOver{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoom
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoom(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoom = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoom   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("room.proto", fileDescriptorRoom) }

var fileDescriptorRoom = []byte{
	// 777 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xd3, 0x58,
	0x14, 0x8e, 0xeb, 0xd8, 0x71, 0x4e, 0x54, 0x69, 0xe4, 0xa9, 0xaa, 0x68, 0x34, 0xb2, 0x22, 0x2f,
	0x46, 0x5d, 0x8c, 0x52, 0xa9, 0xf3, 0x02, 0x23, 0x5c, 0x7e, 0xa4, 0x82, 0x8a, 0x6c, 0x60, 0x05,
	0x8b, 0xdb, 0xf8, 0x10, 0xac, 0xc6, 0xbe, 0xd1, 0xf5, 0x75, 0xa0, 0xac, 0x78, 0x04, 0x1e, 0x82,
	0x05, 0x0b, 0x5e, 0x80, 0x37, 0x60, 0xd9, 0x25, 0x4b, 0x1a, 0x16, 0xb0, 0xec, 0x8e, 0x2d, 0xba,
	0xc7, 0xbf, 0x15, 0x76, 0x5b, 0x04, 0xbb, 0xfb, 0x1d, 0x7f, 0xe7, 0x3b, 0x3f, 0xf7, 0xdc, 0x93,
	0x00, 0x08, 0xce, 0xe3, 0xe9, 0x52, 0x70, 0xc9, 0x6d, 0x2b, 0xc6, 0x34, 0x65, 0x73, 0x4c, 0xff,
	0xb2, 0x56, 0x3c, 0xb7, 0xb9, 0xff, 0x03, 0x78, 0x37, 0x13, 0x89, 0xc2, 0xe7, 0x3c, 0xb6, 0x6d,
	0xe8, 0xcf, 0x78, 0x88, 0x63, 0x6d, 0xa2, 0xed, 0x6c, 0xfa, 0x74, 0xb6, 0x1d, 0x80, 0x28, 0x59,
	0x45, 0x12, 0xe9, 0xcb, 0xc6, 0x44, 0xdb, 0x19, 0xfa, 0x0d, 0x8b, 0xfb, 0x4d, 0x03, 0x08, 0x2e,
	0x97, 0x98, 0x82, 0xa5, 0xd2, 0x88, 0x92, 0xa7, 0x9c, 0x04, 0x46, 0x7b, 0xf6, 0xb4, 0xcc, 0x65,
	0xaa, 0xbc, 0xf6, 0x99, 0x64, 0x7e, 0xc5, 0x51, 0xfc, 0x2c, 0x45, 0x41, 0x7c, 0x7d, 0xa2, 0xff,
	0xc8, 0x7f, 0x98, 0xa2, 0xf0, 0x2b, 0x8e, 0xbd, 0x0b, 0xd6, 0x8c, 0x89, 0x90, 0xf8, 0x7d, 0xe2,
	0xff, 0x79, 0x91, 0xef, 0x31, 0x11, 0xa6, 0x7e, 0x45, 0x52, 0x01, 0x56, 0x5c, 0x22, 0x39, 0x18,
	0x6d, 0x09, 0x3d, 0xe2, 0x12, 0xfd, 0x8a, 0x63, 0x6f, 0x81, 0x81, 0x42, 0x70, 0x31, 0x36, 0xa9,
	0xaa, 0x1c, 0xb8, 0x7f, 0x83, 0xe9, 0xdd, 0x45, 0xb6, 0xc2, 0xb6, 0xa2, 0xdd, 0x5b, 0x60, 0x06,
	0x9d, 0x5f, 0x95, 0x2d, 0x45, 0x26, 0xa9, 0x1d, 0x9b, 0x3e, 0x9d, 0xeb, 0x28, 0x7a, 0x33, 0xca,
	0x1e, 0x98, 0x9e, 0x8f, 0x2c, 0x3c, 0x69, 0xd5, 0xd9, 0x02, 0x43, 0xa8, 0x8f, 0x24, 0x64, 0xf9,
	0x39, 0x70, 0x1f, 0x83, 0x19, 0x74, 0xfb, 0x74, 0xc4, 0xce, 0x75, 0xf4, 0x86, 0x4e, 0x9d, 0x51,
	0xbf, 0x99, 0xd1, 0x7b, 0x0d, 0x46, 0x9e, 0x27, 0x90, 0x49, 0xec, 0xbc, 0x72, 0xa5, 0x97, 0xb0,
	0xb8, 0x1c, 0x98, 0x1c, 0x90, 0x55, 0x9e, 0x2c, 0xb1, 0xac, 0x90, 0x80, 0xf2, 0x67, 0x89, 0xc4,
	0x22, 0x08, 0x9d, 0x89, 0xc9, 0xb3, 0x24, 0xa4, 0xeb, 0x51, 0x4c, 0x05, 0xec, 0x31, 0x0c, 0x96,
	0xec, 0x24, 0xc6, 0x44, 0x16, 0x37, 0x51, 0x42, 0xfb, 0x0f, 0xd0, 0x97, 0x8c, 0x8f, 0x07, 0x64,
	0x55, 0x47, 0xa5, 0x30, 0xe3, 0x59, 0x22, 0xc7, 0x56, 0xae, 0x40, 0xc0, 0x65, 0x30, 0x0a, 0xae,
	0x48, 0x7d, 0x07, 0x0c, 0x11, 0x32, 0xc9, 0x2e, 0x19, 0xd5, 0x9c, 0xd0, 0x71, 0x61, 0xbb, 0x60,
	0x78, 0x07, 0xd1, 0xec, 0xf8, 0xba, 0xbd, 0x77, 0x33, 0x30, 0x82, 0x9f, 0x71, 0xb0, 0xb7, 0xc1,
	0xa4, 0xd9, 0x0f, 0x8b, 0xc0, 0x05, 0x52, 0x76, 0x81, 0x69, 0xb6, 0x90, 0x45, 0x2b, 0x0b, 0x54,
	0xe7, 0x69, 0x34, 0xf3, 0xbc, 0x07, 0x83, 0xc0, 0x63, 0x31, 0x46, 0x49, 0xd7, 0xa3, 0xad, 0x1e,
	0x61, 0x6b, 0x27, 0x2e, 0x3e, 0x42, 0xf7, 0x8d, 0xda, 0x03, 0xb7, 0x59, 0x8c, 0xa9, 0x64, 0x42,
	0x76, 0xd5, 0x12, 0x46, 0x33, 0x2c, 0x6b, 0x51, 0x67, 0x95, 0x73, 0x88, 0x6c, 0x81, 0x65, 0x13,
	0x0b, 0xa4, 0x72, 0x5e, 0xb0, 0x68, 0x19, 0x95, 0xa3, 0x47, 0xa0, 0xb0, 0xbe, 0x8c, 0xca, 0x4a,
	0x08, 0xd0, 0x55, 0xab, 0x17, 0x3e, 0x36, 0x27, 0x3a, 0x5d, 0xb5, 0x02, 0xca, 0xba, 0x62, 0x8b,
	0x0c, 0x8b, 0xa1, 0xc8, 0x81, 0x1b, 0x83, 0x11, 0xec, 0x0b, 0xf6, 0xfc, 0xda, 0xcd, 0x56, 0x3c,
	0x26, 0xca, 0x56, 0xd3, 0xb9, 0x96, 0xee, 0x37, 0xa4, 0x15, 0xf3, 0x98, 0x27, 0xf3, 0x22, 0x37,
	0x3a, 0xbb, 0x7b, 0x60, 0x79, 0xfb, 0x51, 0x4a, 0x5e, 0x1d, 0x11, 0x49, 0x7d, 0xa3, 0x56, 0x77,
	0x05, 0x58, 0xc1, 0x15, 0x3e, 0xbf, 0x90, 0x65, 0xfb, 0x30, 0xdc, 0x01, 0xcb, 0x3b, 0x5c, 0xa2,
	0x60, 0x12, 0xaf, 0x9b, 0x67, 0xad, 0xaf, 0x37, 0x1b, 0xfc, 0x4e, 0x03, 0x2b, 0xb8, 0x42, 0xaa,
	0x6d, 0xa2, 0x8f, 0x90, 0xac, 0xc5, 0x14, 0xe4, 0xa8, 0x0a, 0xdb, 0x6f, 0x0b, 0x6b, 0x34, 0xcb,
	0x9a, 0xc0, 0x28, 0x8c, 0xd2, 0x19, 0x4f, 0x64, 0x94, 0x64, 0x58, 0xac, 0x87, 0xa6, 0xa9, 0x2e,
	0x7c, 0xd0, 0x2c, 0xfc, 0x09, 0x0c, 0x83, 0xfb, 0x98, 0xcc, 0x0f, 0x78, 0x32, 0xff, 0xfd, 0xdd,
	0x76, 0xbf, 0x68, 0x30, 0xa4, 0x57, 0xc1, 0x57, 0x28, 0x5a, 0xf5, 0xd5, 0xa3, 0x55, 0x3f, 0x7c,
	0x65, 0x6f, 0x0b, 0x54, 0x6f, 0x40, 0xbd, 0xb9, 0x01, 0xb7, 0xc1, 0xc4, 0x17, 0xcb, 0x48, 0x94,
	0x61, 0x0a, 0xa4, 0xec, 0xcf, 0xb2, 0x07, 0x6a, 0xb5, 0xe6, 0x5d, 0x29, 0x50, 0xbe, 0x31, 0x79,
	0xa0, 0x0a, 0xa8, 0x36, 0x26, 0xc1, 0xaa, 0xae, 0x41, 0x4b, 0x5d, 0x56, 0xa3, 0xae, 0x7f, 0xa0,
	0x4f, 0xdb, 0x70, 0xd8, 0xf6, 0x43, 0x7c, 0xb8, 0x42, 0xe1, 0xd3, 0xf7, 0x1b, 0xff, 0x9e, 0x9e,
	0x39, 0xbd, 0x8f, 0x67, 0x4e, 0xef, 0xfc, 0xcc, 0xd1, 0x5e, 0xad, 0x1d, 0xed, 0xed, 0xda, 0xd1,
	0x3e, 0xac, 0x1d, 0xed, 0x74, 0xed, 0x68, 0x9f, 0xd6, 0x8e, 0xf6, 0x75, 0xed, 0xf4, 0xce, 0xd7,
	0x8e, 0xf6, 0xfa, 0xb3, 0xd3, 0x3b, 0x32, 0xe9, 0xef, 0xc7, 0x7f, 0xdf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xea, 0x0a, 0x70, 0xdc, 0xa0, 0x08, 0x00, 0x00,
}
